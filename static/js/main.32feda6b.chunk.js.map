{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Loader.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","features","id","name","area","postcode","type","desc","price","image","className","src","alt","href","target","CardList","property","map","house","key","SearchBox","searchChange","onChange","placeholder","Loader","Scroll","props","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","value","fetch","then","resp","json","homes","filterPropertyType","filter","home","toLowerCase","includes","length","Fragment","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.32feda6b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\n\r\n// props destructure {name,addres...} = props\r\nconst Card = ({features,id,name,area, postcode, type, desc, price, image}) => {\r\n\r\n\treturn (\r\n\t\t\t<div className=\"card\">\r\n\t\t\t\t<div className=\"card__house card__house--front\">\r\n\t\t\t\t\t<div className=\"house__details\">\r\n\t\t\t\t\t<img className=\"house__img\" src={image} alt={`property-${id}, ${name}`}/>\r\n\t\t\t\t\t\t<h2 className=\"house__name\">{name}</h2>\r\n\t\t\t\t\t\t<p className=\"house__address\">{`${area}, ${postcode}`}</p>\r\n\t\t\t\t\t\t<p className=\"house__type\">{type}</p>\r\n\t\t\t\t\t\t<p className=\"house__price\">\r\n\t\t\t\t\t\t\t<span className=\"house__price--currency\">Â£</span>\r\n\t\t\t\t\t\t\t{price}\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{/* Flip over and show these details */}\r\n\t\t\t\t\t<div className=\"card__house card__house--back\">\r\n\t\t\t\t\t\t<div className=\"house__details\">\r\n\t\t\t\t\t\t\t<p className=\"house__description\">{desc}\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t<ul className=\"house__list\">\r\n\t\t\t\t\t\t\t\t<li className=\"house__item house__item--emojiBed\">{`${features[\"bedrooms\"]} bedrooms`}</li>\r\n\t\t\t\t\t\t\t\t<li className=\"house__item house__item--emojiCity\">{`${features[\"city_distance\"]}mi from city center`}</li>\r\n\t\t\t\t\t\t\t\t<li className=\"house__item house__item--emojiSchool\">{`${features[\"school_distance\"]}mi from local school`}</li>\r\n\t\t\t\t\t\t\t\t<li className=\"house__item house__item--emojiParking\">{`parking, ${features[\"parking\"]}`}</li>\r\n\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t<a className=\"btn btn__primary\" href=\"#!\" target=\"_blank\">View</a>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t)\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from \"./Card\";\r\n\r\n// {property} = props/property\r\nconst CardList = ({ property }) => {\r\n\t// const cardsArray = \r\n\t\r\n\treturn (\r\n\t\t\t<div className=\"card-container\">\r\n\t\t\t\t{\r\n\t\t\t\t\tproperty.map(house => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Card key={ house[\"id\"] } features={ house[\"house_features\"] }  id={ house[\"id\"]}  name={ house[\"house_address\"] }  area={ house[\"house_area\"] }  postcode={ house[\"house_postcode\"] }  type={ house[\"house_type\"] }  desc={ house[\"house_desc\"] }  price={ house[\"house_price\"] }  image={ house[\"imageData\"] }/>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn (\r\n\t\t<div className=\"search\">\r\n\t\t\t<input onChange={ searchChange } className=\"search__input tc\" type=\"search\" placeholder=\"search for property type\" />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Loader = () => {\r\n\treturn (\r\n\t\t<div className=\"loader\">\r\n\t\t\t<div className=\"loader__spinner\">\r\n\t\t\t  <div className=\"loader__spinner loader__spinner--rect1\"></div>\r\n\t\t\t  <div className=\"loader__spinner loader__spinner--rect2\"></div>\r\n\t\t\t  <div className=\"loader__spinner loader__spinner--rect3\"></div>\r\n\t\t\t  <div className=\"loader__spinner loader__spinner--rect4\"></div>\r\n\t\t\t  <div className=\"loader__spinner loader__spinner--rect5\"></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\n\r\n\r\nexport default Loader;","import React from 'react';\r\n\r\n\r\n// children\r\n/*\r\n\t<Parent component>\r\n\t\t<Child component props={object} />\r\n\t</Parent component>\r\n*/\r\n\r\n// scroll uses children to render children of it's children\r\nconst Scroll = (props) => {\r\n\t// console.log(props);\r\n\t// return props.children;\r\n\treturn (\r\n\t\t<div className=\"scroll\">\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\t// lifeCycle method, similar to try catch\r\n\tcomponentDidCatch(error,info) {\r\n\t\tthis.setState({hasError:true});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { hasError } = this.state;\r\n\t\tif(hasError) {\r\n\t\t\treturn <h1 className=\"tc error-msg\">Oops..Something went wrong.</h1>\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Loader from \"../components/Loader\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tproperty: [],\r\n\t\t\tsearchField:''\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tconst apiURL = \"https://api.myjson.com/bins/jyoes\";\r\n\t\t// this is hosted on a temp server so URL changes frequently\r\n\t\tfetch(apiURL) // api call\r\n\t\t.then(resp => resp.json()) // convert to json\r\n\t\t.then(homes => {\r\n\t\t\tthis.setState({ property: homes })\r\n\t\t});\r\n\t}\r\n\r\n\tonSearchChange = (event) => { // custom function\r\n\t\t// setState for searchField to whatever we type in SearchBox\r\n\t\t// for changing the state DON'T DO this.state.obj = \"\"\r\n\t\tthis.setState({ searchField:event.target.value }) \r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { property, searchField} = this.state;\r\n\t\tconst filterPropertyType = property.filter(home => {\r\n\t\t\treturn home[\"house_type\"].toLowerCase().includes(searchField.toLowerCase());\r\n\t\t\t// if property type (lower case) == searchField (lowercase)\r\n\t\t\t// then filter it\r\n\t\t});\r\n\r\n\t\t// console.log(filterPropertyType);\r\n\t\t\r\n\t\t// if property empty show loader else display cards\r\n\t\treturn (property.length === 0) ? \r\n\t\t<Loader/> : \r\n\t\t(\r\n\t\t\t<React.Fragment>\r\n\t\t \t\t\t<h1 className=\"main-heading tc\">Home Searcher</h1>\r\n\t\t \t\t\t<SearchBox searchChange={ this.onSearchChange }/>\r\n\t\t \t\t\t<Scroll>\r\n\t\t \t\t\t\t<ErrorBoundary>\r\n\t\t \t\t\t\t\t<CardList property={ filterPropertyType }/>\r\n\t\t \t\t\t\t</ErrorBoundary>\r\n\t\t \t\t\t</Scroll>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n\r\n// const App = () => {\r\n// \treturn (\r\n// \t\t<React.Fragment>\r\n// \t\t\t<h1 className=\"tc\">Home Searcher</h1>\r\n// \t\t\t<SearchBox />\r\n// \t\t\t<CardList property={ property }/>\r\n// \t\t</React.Fragment>\r\n// \t);\r\n// }\r\n\r\n\r\n\r\n// props, passed down from parent to child, reads it\r\n// (1/2) state, change/dynamic, description of app, an obj which \r\n// (2/2) describes application\r\n\r\n// Our state would be prop in cardlist and the prop we search for\r\n// Props - what we get from state\r\n// Parent component gives state to child component (recieve as prop)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./sass/main.scss\";\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./containers/App\";\n\n\n// export default => import Name from \"./Name\";\n// export non-default => import { name } from \"./name\";\nReactDOM.render(<App/> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}